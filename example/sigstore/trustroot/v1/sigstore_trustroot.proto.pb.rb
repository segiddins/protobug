# frozen_string_literal: true

# Code generated by protoc-gen-protobug. DO NOT EDIT.

# source: sigstore_trustroot.proto
# syntax: proto3
# package: dev.sigstore.trustroot.v1
# options:
#   java_package: "dev.sigstore.proto.trustroot.v1"
#   java_outer_classname: "TrustRootProto"
#   java_multiple_files: true
#   go_package: "github.com/sigstore/protobuf-specs/gen/pb-go/trustroot/v1"
#   ruby_package: "Sigstore::TrustRoot::V1"

# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "protobug"

require "sigstore/common/v1/sigstore_common.proto.pb"

module Sigstore
  module TrustRoot
    module V1
      # TransparencyLogInstance describes the immutable parameters from a
      # transparency log.
      # See https://www.rfc-editor.org/rfc/rfc9162.html#name-log-parameters
      # for more details.
      # The included parameters are the minimal set required to identify a log,
      # and verify an inclusion proof/promise.
      class TransparencyLogInstance
        extend Protobug::Message

        self.full_name = "dev.sigstore.trustroot.v1.TransparencyLogInstance"

        # The base URL at which can be used to URLs for the client.
        optional(
          1,
          "base_url",
          type: :string,
          json_name: "baseUrl",
          proto3_optional: false
        )
        # The hash algorithm used for the Merkle Tree.
        optional(
          2,
          "hash_algorithm",
          type: :enum,
          enum_type: "dev.sigstore.common.v1.HashAlgorithm",
          json_name: "hashAlgorithm",
          proto3_optional: false
        )
        # The public key used to verify signatures generated by the log.
        # This attribute contains the signature algorithm used by the log.
        optional(
          3,
          "public_key",
          type: :message,
          message_type: "dev.sigstore.common.v1.PublicKey",
          json_name: "publicKey",
          proto3_optional: false
        )
        # The unique identifier for this transparency log.
        optional(
          4,
          "log_id",
          type: :message,
          message_type: "dev.sigstore.common.v1.LogId",
          json_name: "logId",
          proto3_optional: false
        )
      end

      # CertificateAuthority enlists the information required to identify which
      # CA to use and perform signature verification.
      class CertificateAuthority
        extend Protobug::Message

        self.full_name = "dev.sigstore.trustroot.v1.CertificateAuthority"

        # The root certificate MUST be self-signed, and so the subject and
        # issuer are the same.
        optional(
          1,
          "subject",
          type: :message,
          message_type: "dev.sigstore.common.v1.DistinguishedName",
          proto3_optional: false
        )
        # The URI identifies the certificate authority.
        #
        # It is RECOMMENDED that the URI is the base URL for the certificate
        # authority, that can be provided to any SDK/client provided
        # by the certificate authority to interact with the certificate
        # authority.
        optional(2, "uri", type: :string, proto3_optional: false)
        # The certificate chain for this CA.
        optional(
          3,
          "cert_chain",
          type: :message,
          message_type: "dev.sigstore.common.v1.X509CertificateChain",
          json_name: "certChain",
          proto3_optional: false
        )
        # The time the *entire* chain was valid. This is at max the
        # longest interval when *all* certificates in the chain were valid,
        # but it MAY be shorter. Clients MUST check timestamps against *both*
        # the `valid_for` time range *and* the entire certificate chain.
        #
        # The TimeRange should be considered valid *inclusive* of the
        # endpoints.
        optional(
          4,
          "valid_for",
          type: :message,
          message_type: "dev.sigstore.common.v1.TimeRange",
          json_name: "validFor",
          proto3_optional: false
        )
      end

      # TrustedRoot describes the client's complete set of trusted entities.
      # How the TrustedRoot is populated is not specified, but can be a
      # combination of many sources such as TUF repositories, files on disk etc.
      #
      # The TrustedRoot is not meant to be used for any artifact verification, only
      # to capture the complete/global set of trusted verification materials.
      # When verifying an artifact, based on the artifact and policies, a selection
      # of keys/authorities are expected to be extracted and provided to the
      # verification function. This way the set of keys/authorities can be kept to
      # a minimal set by the policy to gain better control over what signatures
      # that are allowed.
      #
      # The embedded transparency logs, CT logs, CAs and TSAs MUST include any
      # previously used instance -- otherwise signatures made in the past cannot
      # be verified.
      #
      # All the listed instances SHOULD be sorted by the 'valid_for' in ascending
      # order, that is, the oldest instance first. Only the last instance is
      # allowed to have their 'end' timestamp unset. All previous instances MUST
      # have a closed interval of validity. The last instance MAY have a closed
      # interval. Clients MUST accept instances that overlaps in time, if not
      # clients may experience problems during rotations of verification
      # materials.
      #
      # To be able to manage planned rotations of either transparency logs or
      # certificate authorities, clienst MUST accept lists of instances where
      # the last instance have a 'valid_for' that belongs to the future.
      # This should not be a problem as clients SHOULD first seek the trust root
      # for a suitable instance before creating a per artifact trust root (that
      # is, a sub-set of the complete trust root) that is used for verification.
      class TrustedRoot
        extend Protobug::Message

        self.full_name = "dev.sigstore.trustroot.v1.TrustedRoot"

        # MUST be application/vnd.dev.sigstore.trustedroot+json;version=0.1
        optional(
          1,
          "media_type",
          type: :string,
          json_name: "mediaType",
          proto3_optional: false
        )
        # A set of trusted Rekor servers.
        repeated(
          2,
          "tlogs",
          type: :message,
          message_type: "dev.sigstore.trustroot.v1.TransparencyLogInstance"
        )
        # A set of trusted certificate authorities (e.g Fulcio), and any
        # intermediate certificates they provide.
        # If a CA is issuing multiple intermediate certificate, each
        # combination shall be represented as separate chain. I.e, a single
        # root cert may appear in multiple chains but with different
        # intermediate and/or leaf certificates.
        # The certificates are intended to be used for verifying artifact
        # signatures.
        repeated(
          3,
          "certificate_authorities",
          type: :message,
          message_type: "dev.sigstore.trustroot.v1.CertificateAuthority",
          json_name: "certificateAuthorities"
        )
        # A set of trusted certificate transparency logs.
        repeated(
          4,
          "ctlogs",
          type: :message,
          message_type: "dev.sigstore.trustroot.v1.TransparencyLogInstance"
        )
        # A set of trusted timestamping authorities.
        repeated(
          5,
          "timestamp_authorities",
          type: :message,
          message_type: "dev.sigstore.trustroot.v1.CertificateAuthority",
          json_name: "timestampAuthorities"
        )
      end

      def self.register_sigstore_trustroot_protos(registry)
        Sigstore::Common::V1.register_sigstore_common_protos(registry)
        registry.register(Sigstore::TrustRoot::V1::TransparencyLogInstance)
        registry.register(Sigstore::TrustRoot::V1::CertificateAuthority)
        registry.register(Sigstore::TrustRoot::V1::TrustedRoot)
      end
    end
  end
end
