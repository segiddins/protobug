class ProtobufTestMessages::Proto2::TestAllTypesProto2 # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:38
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::TestAllTypesProto2
  # optional(1, :optional_int32, type: :int32)
  def optional_int32: () -> Integer
  def has_optional_int32?: () -> bool
  @optional_int32: Integer?
  # optional(2, :optional_int64, type: :int64)
  def optional_int64: () -> Integer
  def has_optional_int64?: () -> bool
  @optional_int64: Integer?
  # optional(3, :optional_uint32, type: :uint32)
  def optional_uint32: () -> Integer
  def has_optional_uint32?: () -> bool
  @optional_uint32: Integer?
  # optional(4, :optional_uint64, type: :uint64)
  def optional_uint64: () -> Integer
  def has_optional_uint64?: () -> bool
  @optional_uint64: Integer?
  # optional(5, :optional_sint32, type: :sint32)
  def optional_sint32: () -> Integer
  def has_optional_sint32?: () -> bool
  @optional_sint32: Integer?
  # optional(6, :optional_sint64, type: :sint64)
  def optional_sint64: () -> Integer
  def has_optional_sint64?: () -> bool
  @optional_sint64: Integer?
  # optional(7, :optional_fixed32, type: :fixed32)
  def optional_fixed32: () -> Integer
  def has_optional_fixed32?: () -> bool
  @optional_fixed32: Integer?
  # optional(8, :optional_fixed64, type: :fixed64)
  def optional_fixed64: () -> Integer
  def has_optional_fixed64?: () -> bool
  @optional_fixed64: Integer?
  # optional(9, :optional_sfixed32, type: :sfixed32)
  def optional_sfixed32: () -> Integer
  def has_optional_sfixed32?: () -> bool
  @optional_sfixed32: Integer?
  # optional(10, :optional_sfixed64, type: :sfixed64)
  def optional_sfixed64: () -> Integer
  def has_optional_sfixed64?: () -> bool
  @optional_sfixed64: Integer?
  # optional(11, :optional_float, type: :float)
  def optional_float: () -> Float
  def has_optional_float?: () -> bool
  @optional_float: Float?
  # optional(12, :optional_double, type: :double)
  def optional_double: () -> Float
  def has_optional_double?: () -> bool
  @optional_double: Float?
  # optional(13, :optional_bool, type: :bool)
  def optional_bool: () -> Integer
  def has_optional_bool?: () -> bool
  @optional_bool: Integer?
  # optional(14, :optional_string, type: :string)
  def optional_string: () -> String
  def has_optional_string?: () -> bool
  @optional_string: String?
  # optional(15, :optional_bytes, type: :bytes)
  def optional_bytes: () -> String
  def has_optional_bytes?: () -> bool
  @optional_bytes: String?
  # optional(18, :optional_nested_message, type: :message)
  def optional_nested_message: () -> ProtobufTestMessages::Proto2::TestAllTypesProto2::NestedMessage
  def has_optional_nested_message?: () -> bool
  @optional_nested_message: ProtobufTestMessages::Proto2::TestAllTypesProto2::NestedMessage?
  # optional(19, :optional_foreign_message, type: :message)
  def optional_foreign_message: () -> ProtobufTestMessages::Proto2::ForeignMessageProto2
  def has_optional_foreign_message?: () -> bool
  @optional_foreign_message: ProtobufTestMessages::Proto2::ForeignMessageProto2?
  # optional(21, :optional_nested_enum, type: :enum)
  def optional_nested_enum: () -> Integer
  def has_optional_nested_enum?: () -> bool
  @optional_nested_enum: Integer?
  # optional(22, :optional_foreign_enum, type: :enum)
  def optional_foreign_enum: () -> Integer
  def has_optional_foreign_enum?: () -> bool
  @optional_foreign_enum: Integer?
  # optional(24, :optional_string_piece, type: :string)
  def optional_string_piece: () -> String
  def has_optional_string_piece?: () -> bool
  @optional_string_piece: String?
  # optional(25, :optional_cord, type: :string)
  def optional_cord: () -> String
  def has_optional_cord?: () -> bool
  @optional_cord: String?
  # optional(27, :recursive_message, type: :message)
  def recursive_message: () -> ProtobufTestMessages::Proto2::TestAllTypesProto2
  def has_recursive_message?: () -> bool
  @recursive_message: ProtobufTestMessages::Proto2::TestAllTypesProto2?
  # repeated(31, :repeated_int32, type: :int32)
  def repeated_int32: () -> Integer
  def has_repeated_int32?: () -> bool
  @repeated_int32: Integer?
  # repeated(32, :repeated_int64, type: :int64)
  def repeated_int64: () -> Integer
  def has_repeated_int64?: () -> bool
  @repeated_int64: Integer?
  # repeated(33, :repeated_uint32, type: :uint32)
  def repeated_uint32: () -> Integer
  def has_repeated_uint32?: () -> bool
  @repeated_uint32: Integer?
  # repeated(34, :repeated_uint64, type: :uint64)
  def repeated_uint64: () -> Integer
  def has_repeated_uint64?: () -> bool
  @repeated_uint64: Integer?
  # repeated(35, :repeated_sint32, type: :sint32)
  def repeated_sint32: () -> Integer
  def has_repeated_sint32?: () -> bool
  @repeated_sint32: Integer?
  # repeated(36, :repeated_sint64, type: :sint64)
  def repeated_sint64: () -> Integer
  def has_repeated_sint64?: () -> bool
  @repeated_sint64: Integer?
  # repeated(37, :repeated_fixed32, type: :fixed32)
  def repeated_fixed32: () -> Integer
  def has_repeated_fixed32?: () -> bool
  @repeated_fixed32: Integer?
  # repeated(38, :repeated_fixed64, type: :fixed64)
  def repeated_fixed64: () -> Integer
  def has_repeated_fixed64?: () -> bool
  @repeated_fixed64: Integer?
  # repeated(39, :repeated_sfixed32, type: :sfixed32)
  def repeated_sfixed32: () -> Integer
  def has_repeated_sfixed32?: () -> bool
  @repeated_sfixed32: Integer?
  # repeated(40, :repeated_sfixed64, type: :sfixed64)
  def repeated_sfixed64: () -> Integer
  def has_repeated_sfixed64?: () -> bool
  @repeated_sfixed64: Integer?
  # repeated(41, :repeated_float, type: :float)
  def repeated_float: () -> Float
  def has_repeated_float?: () -> bool
  @repeated_float: Float?
  # repeated(42, :repeated_double, type: :double)
  def repeated_double: () -> Float
  def has_repeated_double?: () -> bool
  @repeated_double: Float?
  # repeated(43, :repeated_bool, type: :bool)
  def repeated_bool: () -> Integer
  def has_repeated_bool?: () -> bool
  @repeated_bool: Integer?
  # repeated(44, :repeated_string, type: :string)
  def repeated_string: () -> String
  def has_repeated_string?: () -> bool
  @repeated_string: String?
  # repeated(45, :repeated_bytes, type: :bytes)
  def repeated_bytes: () -> String
  def has_repeated_bytes?: () -> bool
  @repeated_bytes: String?
  # repeated(48, :repeated_nested_message, type: :message)
  def repeated_nested_message: () -> ProtobufTestMessages::Proto2::TestAllTypesProto2::NestedMessage
  def has_repeated_nested_message?: () -> bool
  @repeated_nested_message: ProtobufTestMessages::Proto2::TestAllTypesProto2::NestedMessage?
  # repeated(49, :repeated_foreign_message, type: :message)
  def repeated_foreign_message: () -> ProtobufTestMessages::Proto2::ForeignMessageProto2
  def has_repeated_foreign_message?: () -> bool
  @repeated_foreign_message: ProtobufTestMessages::Proto2::ForeignMessageProto2?
  # repeated(51, :repeated_nested_enum, type: :enum)
  def repeated_nested_enum: () -> Integer
  def has_repeated_nested_enum?: () -> bool
  @repeated_nested_enum: Integer?
  # repeated(52, :repeated_foreign_enum, type: :enum)
  def repeated_foreign_enum: () -> Integer
  def has_repeated_foreign_enum?: () -> bool
  @repeated_foreign_enum: Integer?
  # repeated(54, :repeated_string_piece, type: :string)
  def repeated_string_piece: () -> String
  def has_repeated_string_piece?: () -> bool
  @repeated_string_piece: String?
  # repeated(55, :repeated_cord, type: :string)
  def repeated_cord: () -> String
  def has_repeated_cord?: () -> bool
  @repeated_cord: String?
  # repeated(75, :packed_int32, type: :int32)
  def packed_int32: () -> Integer
  def has_packed_int32?: () -> bool
  @packed_int32: Integer?
  # repeated(76, :packed_int64, type: :int64)
  def packed_int64: () -> Integer
  def has_packed_int64?: () -> bool
  @packed_int64: Integer?
  # repeated(77, :packed_uint32, type: :uint32)
  def packed_uint32: () -> Integer
  def has_packed_uint32?: () -> bool
  @packed_uint32: Integer?
  # repeated(78, :packed_uint64, type: :uint64)
  def packed_uint64: () -> Integer
  def has_packed_uint64?: () -> bool
  @packed_uint64: Integer?
  # repeated(79, :packed_sint32, type: :sint32)
  def packed_sint32: () -> Integer
  def has_packed_sint32?: () -> bool
  @packed_sint32: Integer?
  # repeated(80, :packed_sint64, type: :sint64)
  def packed_sint64: () -> Integer
  def has_packed_sint64?: () -> bool
  @packed_sint64: Integer?
  # repeated(81, :packed_fixed32, type: :fixed32)
  def packed_fixed32: () -> Integer
  def has_packed_fixed32?: () -> bool
  @packed_fixed32: Integer?
  # repeated(82, :packed_fixed64, type: :fixed64)
  def packed_fixed64: () -> Integer
  def has_packed_fixed64?: () -> bool
  @packed_fixed64: Integer?
  # repeated(83, :packed_sfixed32, type: :sfixed32)
  def packed_sfixed32: () -> Integer
  def has_packed_sfixed32?: () -> bool
  @packed_sfixed32: Integer?
  # repeated(84, :packed_sfixed64, type: :sfixed64)
  def packed_sfixed64: () -> Integer
  def has_packed_sfixed64?: () -> bool
  @packed_sfixed64: Integer?
  # repeated(85, :packed_float, type: :float)
  def packed_float: () -> Float
  def has_packed_float?: () -> bool
  @packed_float: Float?
  # repeated(86, :packed_double, type: :double)
  def packed_double: () -> Float
  def has_packed_double?: () -> bool
  @packed_double: Float?
  # repeated(87, :packed_bool, type: :bool)
  def packed_bool: () -> Integer
  def has_packed_bool?: () -> bool
  @packed_bool: Integer?
  # repeated(88, :packed_nested_enum, type: :enum)
  def packed_nested_enum: () -> Integer
  def has_packed_nested_enum?: () -> bool
  @packed_nested_enum: Integer?
  # repeated(89, :unpacked_int32, type: :int32)
  def unpacked_int32: () -> Integer
  def has_unpacked_int32?: () -> bool
  @unpacked_int32: Integer?
  # repeated(90, :unpacked_int64, type: :int64)
  def unpacked_int64: () -> Integer
  def has_unpacked_int64?: () -> bool
  @unpacked_int64: Integer?
  # repeated(91, :unpacked_uint32, type: :uint32)
  def unpacked_uint32: () -> Integer
  def has_unpacked_uint32?: () -> bool
  @unpacked_uint32: Integer?
  # repeated(92, :unpacked_uint64, type: :uint64)
  def unpacked_uint64: () -> Integer
  def has_unpacked_uint64?: () -> bool
  @unpacked_uint64: Integer?
  # repeated(93, :unpacked_sint32, type: :sint32)
  def unpacked_sint32: () -> Integer
  def has_unpacked_sint32?: () -> bool
  @unpacked_sint32: Integer?
  # repeated(94, :unpacked_sint64, type: :sint64)
  def unpacked_sint64: () -> Integer
  def has_unpacked_sint64?: () -> bool
  @unpacked_sint64: Integer?
  # repeated(95, :unpacked_fixed32, type: :fixed32)
  def unpacked_fixed32: () -> Integer
  def has_unpacked_fixed32?: () -> bool
  @unpacked_fixed32: Integer?
  # repeated(96, :unpacked_fixed64, type: :fixed64)
  def unpacked_fixed64: () -> Integer
  def has_unpacked_fixed64?: () -> bool
  @unpacked_fixed64: Integer?
  # repeated(97, :unpacked_sfixed32, type: :sfixed32)
  def unpacked_sfixed32: () -> Integer
  def has_unpacked_sfixed32?: () -> bool
  @unpacked_sfixed32: Integer?
  # repeated(98, :unpacked_sfixed64, type: :sfixed64)
  def unpacked_sfixed64: () -> Integer
  def has_unpacked_sfixed64?: () -> bool
  @unpacked_sfixed64: Integer?
  # repeated(99, :unpacked_float, type: :float)
  def unpacked_float: () -> Float
  def has_unpacked_float?: () -> bool
  @unpacked_float: Float?
  # repeated(100, :unpacked_double, type: :double)
  def unpacked_double: () -> Float
  def has_unpacked_double?: () -> bool
  @unpacked_double: Float?
  # repeated(101, :unpacked_bool, type: :bool)
  def unpacked_bool: () -> Integer
  def has_unpacked_bool?: () -> bool
  @unpacked_bool: Integer?
  # repeated(102, :unpacked_nested_enum, type: :enum)
  def unpacked_nested_enum: () -> Integer
  def has_unpacked_nested_enum?: () -> bool
  @unpacked_nested_enum: Integer?
  # map(56, :map_int32_int32, type: :map)
  def map_int32_int32: () -> Hash
  def has_map_int32_int32?: () -> bool
  @map_int32_int32: Hash?
  # map(57, :map_int64_int64, type: :map)
  def map_int64_int64: () -> Hash
  def has_map_int64_int64?: () -> bool
  @map_int64_int64: Hash?
  # map(58, :map_uint32_uint32, type: :map)
  def map_uint32_uint32: () -> Hash
  def has_map_uint32_uint32?: () -> bool
  @map_uint32_uint32: Hash?
  # map(59, :map_uint64_uint64, type: :map)
  def map_uint64_uint64: () -> Hash
  def has_map_uint64_uint64?: () -> bool
  @map_uint64_uint64: Hash?
  # map(60, :map_sint32_sint32, type: :map)
  def map_sint32_sint32: () -> Hash
  def has_map_sint32_sint32?: () -> bool
  @map_sint32_sint32: Hash?
  # map(61, :map_sint64_sint64, type: :map)
  def map_sint64_sint64: () -> Hash
  def has_map_sint64_sint64?: () -> bool
  @map_sint64_sint64: Hash?
  # map(62, :map_fixed32_fixed32, type: :map)
  def map_fixed32_fixed32: () -> Hash
  def has_map_fixed32_fixed32?: () -> bool
  @map_fixed32_fixed32: Hash?
  # map(63, :map_fixed64_fixed64, type: :map)
  def map_fixed64_fixed64: () -> Hash
  def has_map_fixed64_fixed64?: () -> bool
  @map_fixed64_fixed64: Hash?
  # map(64, :map_sfixed32_sfixed32, type: :map)
  def map_sfixed32_sfixed32: () -> Hash
  def has_map_sfixed32_sfixed32?: () -> bool
  @map_sfixed32_sfixed32: Hash?
  # map(65, :map_sfixed64_sfixed64, type: :map)
  def map_sfixed64_sfixed64: () -> Hash
  def has_map_sfixed64_sfixed64?: () -> bool
  @map_sfixed64_sfixed64: Hash?
  # map(66, :map_int32_float, type: :map)
  def map_int32_float: () -> Hash
  def has_map_int32_float?: () -> bool
  @map_int32_float: Hash?
  # map(67, :map_int32_double, type: :map)
  def map_int32_double: () -> Hash
  def has_map_int32_double?: () -> bool
  @map_int32_double: Hash?
  # map(68, :map_bool_bool, type: :map)
  def map_bool_bool: () -> Hash
  def has_map_bool_bool?: () -> bool
  @map_bool_bool: Hash?
  # map(69, :map_string_string, type: :map)
  def map_string_string: () -> Hash
  def has_map_string_string?: () -> bool
  @map_string_string: Hash?
  # map(70, :map_string_bytes, type: :map)
  def map_string_bytes: () -> Hash
  def has_map_string_bytes?: () -> bool
  @map_string_bytes: Hash?
  # map(71, :map_string_nested_message, type: :map)
  def map_string_nested_message: () -> Hash
  def has_map_string_nested_message?: () -> bool
  @map_string_nested_message: Hash?
  # map(72, :map_string_foreign_message, type: :map)
  def map_string_foreign_message: () -> Hash
  def has_map_string_foreign_message?: () -> bool
  @map_string_foreign_message: Hash?
  # map(73, :map_string_nested_enum, type: :map)
  def map_string_nested_enum: () -> Hash
  def has_map_string_nested_enum?: () -> bool
  @map_string_nested_enum: Hash?
  # map(74, :map_string_foreign_enum, type: :map)
  def map_string_foreign_enum: () -> Hash
  def has_map_string_foreign_enum?: () -> bool
  @map_string_foreign_enum: Hash?
  # optional(111, :oneof_uint32, type: :uint32)
  def oneof_uint32: () -> Integer
  def has_oneof_uint32?: () -> bool
  @oneof_uint32: Integer?
  # optional(112, :oneof_nested_message, type: :message)
  def oneof_nested_message: () -> ProtobufTestMessages::Proto2::TestAllTypesProto2::NestedMessage
  def has_oneof_nested_message?: () -> bool
  @oneof_nested_message: ProtobufTestMessages::Proto2::TestAllTypesProto2::NestedMessage?
  # optional(113, :oneof_string, type: :string)
  def oneof_string: () -> String
  def has_oneof_string?: () -> bool
  @oneof_string: String?
  # optional(114, :oneof_bytes, type: :bytes)
  def oneof_bytes: () -> String
  def has_oneof_bytes?: () -> bool
  @oneof_bytes: String?
  # optional(115, :oneof_bool, type: :bool)
  def oneof_bool: () -> Integer
  def has_oneof_bool?: () -> bool
  @oneof_bool: Integer?
  # optional(116, :oneof_uint64, type: :uint64)
  def oneof_uint64: () -> Integer
  def has_oneof_uint64?: () -> bool
  @oneof_uint64: Integer?
  # optional(117, :oneof_float, type: :float)
  def oneof_float: () -> Float
  def has_oneof_float?: () -> bool
  @oneof_float: Float?
  # optional(118, :oneof_double, type: :double)
  def oneof_double: () -> Float
  def has_oneof_double?: () -> bool
  @oneof_double: Float?
  # optional(119, :oneof_enum, type: :enum)
  def oneof_enum: () -> Integer
  def has_oneof_enum?: () -> bool
  @oneof_enum: Integer?
  # optional(241, :default_int32, type: :int32)
  def default_int32: () -> Integer
  def has_default_int32?: () -> bool
  @default_int32: Integer?
  # optional(242, :default_int64, type: :int64)
  def default_int64: () -> Integer
  def has_default_int64?: () -> bool
  @default_int64: Integer?
  # optional(243, :default_uint32, type: :uint32)
  def default_uint32: () -> Integer
  def has_default_uint32?: () -> bool
  @default_uint32: Integer?
  # optional(244, :default_uint64, type: :uint64)
  def default_uint64: () -> Integer
  def has_default_uint64?: () -> bool
  @default_uint64: Integer?
  # optional(245, :default_sint32, type: :sint32)
  def default_sint32: () -> Integer
  def has_default_sint32?: () -> bool
  @default_sint32: Integer?
  # optional(246, :default_sint64, type: :sint64)
  def default_sint64: () -> Integer
  def has_default_sint64?: () -> bool
  @default_sint64: Integer?
  # optional(247, :default_fixed32, type: :fixed32)
  def default_fixed32: () -> Integer
  def has_default_fixed32?: () -> bool
  @default_fixed32: Integer?
  # optional(248, :default_fixed64, type: :fixed64)
  def default_fixed64: () -> Integer
  def has_default_fixed64?: () -> bool
  @default_fixed64: Integer?
  # optional(249, :default_sfixed32, type: :sfixed32)
  def default_sfixed32: () -> Integer
  def has_default_sfixed32?: () -> bool
  @default_sfixed32: Integer?
  # optional(250, :default_sfixed64, type: :sfixed64)
  def default_sfixed64: () -> Integer
  def has_default_sfixed64?: () -> bool
  @default_sfixed64: Integer?
  # optional(251, :default_float, type: :float)
  def default_float: () -> Float
  def has_default_float?: () -> bool
  @default_float: Float?
  # optional(252, :default_double, type: :double)
  def default_double: () -> Float
  def has_default_double?: () -> bool
  @default_double: Float?
  # optional(253, :default_bool, type: :bool)
  def default_bool: () -> Integer
  def has_default_bool?: () -> bool
  @default_bool: Integer?
  # optional(254, :default_string, type: :string)
  def default_string: () -> String
  def has_default_string?: () -> bool
  @default_string: String?
  # optional(255, :default_bytes, type: :bytes)
  def default_bytes: () -> String
  def has_default_bytes?: () -> bool
  @default_bytes: String?
  # optional(401, :fieldname1, type: :int32)
  def fieldname1: () -> Integer
  def has_fieldname1?: () -> bool
  @fieldname1: Integer?
  # optional(402, :field_name2, type: :int32)
  def field_name2: () -> Integer
  def has_field_name2?: () -> bool
  @field_name2: Integer?
  # optional(403, :_field_name3, type: :int32)
  def _field_name3: () -> Integer
  def has__field_name3?: () -> bool
  @_field_name3: Integer?
  # optional(404, :field__name4_, type: :int32)
  def field__name4_: () -> Integer
  def has_field__name4_?: () -> bool
  @field__name4_: Integer?
  # optional(405, :field0name5, type: :int32)
  def field0name5: () -> Integer
  def has_field0name5?: () -> bool
  @field0name5: Integer?
  # optional(406, :field_0_name6, type: :int32)
  def field_0_name6: () -> Integer
  def has_field_0_name6?: () -> bool
  @field_0_name6: Integer?
  # optional(407, :fieldName7, type: :int32)
  def fieldName7: () -> Integer
  def has_fieldName7?: () -> bool
  @fieldName7: Integer?
  # optional(408, :FieldName8, type: :int32)
  def FieldName8: () -> Integer
  def has_FieldName8?: () -> bool
  @FieldName8: Integer?
  # optional(409, :field_Name9, type: :int32)
  def field_Name9: () -> Integer
  def has_field_Name9?: () -> bool
  @field_Name9: Integer?
  # optional(410, :Field_Name10, type: :int32)
  def Field_Name10: () -> Integer
  def has_Field_Name10?: () -> bool
  @Field_Name10: Integer?
  # optional(411, :FIELD_NAME11, type: :int32)
  def FIELD_NAME11: () -> Integer
  def has_FIELD_NAME11?: () -> bool
  @FIELD_NAME11: Integer?
  # optional(412, :FIELD_name12, type: :int32)
  def FIELD_name12: () -> Integer
  def has_FIELD_name12?: () -> bool
  @FIELD_name12: Integer?
  # optional(413, :__field_name13, type: :int32)
  def __field_name13: () -> Integer
  def has___field_name13?: () -> bool
  @__field_name13: Integer?
  # optional(414, :__Field_name14, type: :int32)
  def __Field_name14: () -> Integer
  def has___Field_name14?: () -> bool
  @__Field_name14: Integer?
  # optional(415, :field__name15, type: :int32)
  def field__name15: () -> Integer
  def has_field__name15?: () -> bool
  @field__name15: Integer?
  # optional(416, :field__Name16, type: :int32)
  def field__Name16: () -> Integer
  def has_field__Name16?: () -> bool
  @field__Name16: Integer?
  # optional(417, :field_name17__, type: :int32)
  def field_name17__: () -> Integer
  def has_field_name17__?: () -> bool
  @field_name17__: Integer?
  # optional(418, :Field_name18__, type: :int32)
  def Field_name18__: () -> Integer
  def has_Field_name18__?: () -> bool
  @Field_name18__: Integer?
end
class ProtobufTestMessages::Proto2::TestAllTypesProto2::NestedMessage # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:43
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::TestAllTypesProto2::NestedMessage
  # optional(1, :a, type: :int32)
  def a: () -> Integer
  def has_a?: () -> bool
  @a: Integer?
  # optional(2, :corecursive, type: :message)
  def corecursive: () -> ProtobufTestMessages::Proto2::TestAllTypesProto2
  def has_corecursive?: () -> bool
  @corecursive: ProtobufTestMessages::Proto2::TestAllTypesProto2?
end
module ProtobufTestMessages::Proto2::TestAllTypesProto2::NestedEnum # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:57
  FOO: Integer
  BAR: Integer
  BAZ: Integer
  NEG: Integer
end
class ProtobufTestMessages::Proto2::TestAllTypesProto2::Data # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:637
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::TestAllTypesProto2::Data
  # optional(202, :group_int32, type: :int32)
  def group_int32: () -> Integer
  def has_group_int32?: () -> bool
  @group_int32: Integer?
  # optional(203, :group_uint32, type: :uint32)
  def group_uint32: () -> Integer
  def has_group_uint32?: () -> bool
  @group_uint32: Integer?
end
class ProtobufTestMessages::Proto2::TestAllTypesProto2::MultiWordGroupField # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:647
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::TestAllTypesProto2::MultiWordGroupField
  # optional(205, :group_int32, type: :int32)
  def group_int32: () -> Integer
  def has_group_int32?: () -> bool
  @group_int32: Integer?
  # optional(206, :group_uint32, type: :uint32)
  def group_uint32: () -> Integer
  def has_group_uint32?: () -> bool
  @group_uint32: Integer?
end
class ProtobufTestMessages::Proto2::TestAllTypesProto2::MessageSetCorrect # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:784
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::TestAllTypesProto2::MessageSetCorrect
end
class ProtobufTestMessages::Proto2::TestAllTypesProto2::MessageSetCorrectExtension1 # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:790
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::TestAllTypesProto2::MessageSetCorrectExtension1
  # optional(25, :str, type: :string)
  def str: () -> String
  def has_str?: () -> bool
  @str: String?
end
class ProtobufTestMessages::Proto2::TestAllTypesProto2::MessageSetCorrectExtension2 # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:810
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::TestAllTypesProto2::MessageSetCorrectExtension2
  # optional(9, :i, type: :int32)
  def i: () -> Integer
  def has_i?: () -> bool
  @i: Integer?
end
class ProtobufTestMessages::Proto2::ForeignMessageProto2 # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:834
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::ForeignMessageProto2
  # optional(1, :c, type: :int32)
  def c: () -> Integer
  def has_c?: () -> bool
  @c: Integer?
end
module ProtobufTestMessages::Proto2::ForeignEnumProto2 # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:842
  FOREIGN_FOO: Integer
  FOREIGN_BAR: Integer
  FOREIGN_BAZ: Integer
end
class ProtobufTestMessages::Proto2::GroupField # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:863
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::GroupField
  # optional(122, :group_int32, type: :int32)
  def group_int32: () -> Integer
  def has_group_int32?: () -> bool
  @group_int32: Integer?
  # optional(123, :group_uint32, type: :uint32)
  def group_uint32: () -> Integer
  def has_group_uint32?: () -> bool
  @group_uint32: Integer?
end
class ProtobufTestMessages::Proto2::UnknownToTestAllTypes # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:878
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::UnknownToTestAllTypes
  # optional(1001, :optional_int32, type: :int32)
  def optional_int32: () -> Integer
  def has_optional_int32?: () -> bool
  @optional_int32: Integer?
  # optional(1002, :optional_string, type: :string)
  def optional_string: () -> String
  def has_optional_string?: () -> bool
  @optional_string: String?
  # optional(1003, :nested_message, type: :message)
  def nested_message: () -> ProtobufTestMessages::Proto2::ForeignMessageProto2
  def has_nested_message?: () -> bool
  @nested_message: ProtobufTestMessages::Proto2::ForeignMessageProto2?
  # optional(1006, :optional_bool, type: :bool)
  def optional_bool: () -> Integer
  def has_optional_bool?: () -> bool
  @optional_bool: Integer?
  # repeated(1011, :repeated_int32, type: :int32)
  def repeated_int32: () -> Integer
  def has_repeated_int32?: () -> bool
  @repeated_int32: Integer?
end
class ProtobufTestMessages::Proto2::UnknownToTestAllTypes::OptionalGroup # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:902
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::UnknownToTestAllTypes::OptionalGroup
  # optional(1, :a, type: :int32)
  def a: () -> Integer
  def has_a?: () -> bool
  @a: Integer?
end
class ProtobufTestMessages::Proto2::NullHypothesisProto2 # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:920
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::NullHypothesisProto2
end
class ProtobufTestMessages::Proto2::EnumOnlyProto2 # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:926
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::EnumOnlyProto2
end
module ProtobufTestMessages::Proto2::EnumOnlyProto2::Bool # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:931
  kFalse: Integer
  kTrue: Integer
end
class ProtobufTestMessages::Proto2::OneStringProto2 # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:941
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::OneStringProto2
  # optional(1, :data, type: :string)
  def data: () -> String
  def has_data?: () -> bool
  @data: String?
end
class ProtobufTestMessages::Proto2::ProtoWithKeywords # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:949
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::ProtoWithKeywords
  # optional(1, :inline, type: :int32)
  def inline: () -> Integer
  def has_inline?: () -> bool
  @inline: Integer?
  # optional(2, :concept, type: :string)
  def concept: () -> String
  def has_concept?: () -> bool
  @concept: String?
  # repeated(3, :requires, type: :string)
  def requires: () -> String
  def has_requires?: () -> bool
  @requires: String?
end
class ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2 # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:959
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2
  # required(1, :required_int32, type: :int32)
  def required_int32: () -> Integer
  def has_required_int32?: () -> bool
  @required_int32: Integer?
  # required(2, :required_int64, type: :int64)
  def required_int64: () -> Integer
  def has_required_int64?: () -> bool
  @required_int64: Integer?
  # required(3, :required_uint32, type: :uint32)
  def required_uint32: () -> Integer
  def has_required_uint32?: () -> bool
  @required_uint32: Integer?
  # required(4, :required_uint64, type: :uint64)
  def required_uint64: () -> Integer
  def has_required_uint64?: () -> bool
  @required_uint64: Integer?
  # required(5, :required_sint32, type: :sint32)
  def required_sint32: () -> Integer
  def has_required_sint32?: () -> bool
  @required_sint32: Integer?
  # required(6, :required_sint64, type: :sint64)
  def required_sint64: () -> Integer
  def has_required_sint64?: () -> bool
  @required_sint64: Integer?
  # required(7, :required_fixed32, type: :fixed32)
  def required_fixed32: () -> Integer
  def has_required_fixed32?: () -> bool
  @required_fixed32: Integer?
  # required(8, :required_fixed64, type: :fixed64)
  def required_fixed64: () -> Integer
  def has_required_fixed64?: () -> bool
  @required_fixed64: Integer?
  # required(9, :required_sfixed32, type: :sfixed32)
  def required_sfixed32: () -> Integer
  def has_required_sfixed32?: () -> bool
  @required_sfixed32: Integer?
  # required(10, :required_sfixed64, type: :sfixed64)
  def required_sfixed64: () -> Integer
  def has_required_sfixed64?: () -> bool
  @required_sfixed64: Integer?
  # required(11, :required_float, type: :float)
  def required_float: () -> Float
  def has_required_float?: () -> bool
  @required_float: Float?
  # required(12, :required_double, type: :double)
  def required_double: () -> Float
  def has_required_double?: () -> bool
  @required_double: Float?
  # required(13, :required_bool, type: :bool)
  def required_bool: () -> Integer
  def has_required_bool?: () -> bool
  @required_bool: Integer?
  # required(14, :required_string, type: :string)
  def required_string: () -> String
  def has_required_string?: () -> bool
  @required_string: String?
  # required(15, :required_bytes, type: :bytes)
  def required_bytes: () -> String
  def has_required_bytes?: () -> bool
  @required_bytes: String?
  # required(18, :required_nested_message, type: :message)
  def required_nested_message: () -> ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2::NestedMessage
  def has_required_nested_message?: () -> bool
  @required_nested_message: ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2::NestedMessage?
  # required(19, :required_foreign_message, type: :message)
  def required_foreign_message: () -> ProtobufTestMessages::Proto2::ForeignMessageProto2
  def has_required_foreign_message?: () -> bool
  @required_foreign_message: ProtobufTestMessages::Proto2::ForeignMessageProto2?
  # required(21, :required_nested_enum, type: :enum)
  def required_nested_enum: () -> Integer
  def has_required_nested_enum?: () -> bool
  @required_nested_enum: Integer?
  # required(22, :required_foreign_enum, type: :enum)
  def required_foreign_enum: () -> Integer
  def has_required_foreign_enum?: () -> bool
  @required_foreign_enum: Integer?
  # required(24, :required_string_piece, type: :string)
  def required_string_piece: () -> String
  def has_required_string_piece?: () -> bool
  @required_string_piece: String?
  # required(25, :required_cord, type: :string)
  def required_cord: () -> String
  def has_required_cord?: () -> bool
  @required_cord: String?
  # required(27, :recursive_message, type: :message)
  def recursive_message: () -> ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2
  def has_recursive_message?: () -> bool
  @recursive_message: ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2?
  # optional(28, :optional_recursive_message, type: :message)
  def optional_recursive_message: () -> ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2
  def has_optional_recursive_message?: () -> bool
  @optional_recursive_message: ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2?
  # required(241, :default_int32, type: :int32)
  def default_int32: () -> Integer
  def has_default_int32?: () -> bool
  @default_int32: Integer?
  # required(242, :default_int64, type: :int64)
  def default_int64: () -> Integer
  def has_default_int64?: () -> bool
  @default_int64: Integer?
  # required(243, :default_uint32, type: :uint32)
  def default_uint32: () -> Integer
  def has_default_uint32?: () -> bool
  @default_uint32: Integer?
  # required(244, :default_uint64, type: :uint64)
  def default_uint64: () -> Integer
  def has_default_uint64?: () -> bool
  @default_uint64: Integer?
  # required(245, :default_sint32, type: :sint32)
  def default_sint32: () -> Integer
  def has_default_sint32?: () -> bool
  @default_sint32: Integer?
  # required(246, :default_sint64, type: :sint64)
  def default_sint64: () -> Integer
  def has_default_sint64?: () -> bool
  @default_sint64: Integer?
  # required(247, :default_fixed32, type: :fixed32)
  def default_fixed32: () -> Integer
  def has_default_fixed32?: () -> bool
  @default_fixed32: Integer?
  # required(248, :default_fixed64, type: :fixed64)
  def default_fixed64: () -> Integer
  def has_default_fixed64?: () -> bool
  @default_fixed64: Integer?
  # required(249, :default_sfixed32, type: :sfixed32)
  def default_sfixed32: () -> Integer
  def has_default_sfixed32?: () -> bool
  @default_sfixed32: Integer?
  # required(250, :default_sfixed64, type: :sfixed64)
  def default_sfixed64: () -> Integer
  def has_default_sfixed64?: () -> bool
  @default_sfixed64: Integer?
  # required(251, :default_float, type: :float)
  def default_float: () -> Float
  def has_default_float?: () -> bool
  @default_float: Float?
  # required(252, :default_double, type: :double)
  def default_double: () -> Float
  def has_default_double?: () -> bool
  @default_double: Float?
  # required(253, :default_bool, type: :bool)
  def default_bool: () -> Integer
  def has_default_bool?: () -> bool
  @default_bool: Integer?
  # required(254, :default_string, type: :string)
  def default_string: () -> String
  def has_default_string?: () -> bool
  @default_string: String?
  # required(255, :default_bytes, type: :bytes)
  def default_bytes: () -> String
  def has_default_bytes?: () -> bool
  @default_bytes: String?
end
class ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2::NestedMessage # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:964
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2::NestedMessage
  # required(1, :a, type: :int32)
  def a: () -> Integer
  def has_a?: () -> bool
  @a: Integer?
  # required(2, :corecursive, type: :message)
  def corecursive: () -> ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2
  def has_corecursive?: () -> bool
  @corecursive: ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2?
  # optional(3, :optional_corecursive, type: :message)
  def optional_corecursive: () -> ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2
  def has_optional_corecursive?: () -> bool
  @optional_corecursive: ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2?
end
module ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2::NestedEnum # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:987
  FOO: Integer
  BAR: Integer
  BAZ: Integer
  NEG: Integer
end
class ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2::Data # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:1098
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2::Data
  # required(202, :group_int32, type: :int32)
  def group_int32: () -> Integer
  def has_group_int32?: () -> bool
  @group_int32: Integer?
  # required(203, :group_uint32, type: :uint32)
  def group_uint32: () -> Integer
  def has_group_uint32?: () -> bool
  @group_uint32: Integer?
end
class ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2::MessageSetCorrect # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:1215
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2::MessageSetCorrect
end
class ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2::MessageSetCorrectExtension1 # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:1221
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2::MessageSetCorrectExtension1
  # required(25, :str, type: :string)
  def str: () -> String
  def has_str?: () -> bool
  @str: String?
end
class ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2::MessageSetCorrectExtension2 # /lib/protobuf_test_messages/proto2/test_messages_proto2_pb.rb:1241
  def self.decode: (String string) -> ProtobufTestMessages::Proto2::TestAllRequiredTypesProto2::MessageSetCorrectExtension2
  # required(9, :i, type: :int32)
  def i: () -> Integer
  def has_i?: () -> bool
  @i: Integer?
end
