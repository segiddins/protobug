# frozen_string_literal: true

# Code generated by protoc-gen-protobug. DO NOT EDIT.

# source: google/protobuf/type.proto
# syntax: proto3
# package: google.protobuf
# options:
#   java_package: "com.google.protobuf"
#   java_outer_classname: "TypeProto"
#   java_multiple_files: true
#   go_package: "google.golang.org/protobuf/types/known/typepb"
#   cc_enable_arenas: true
#   objc_class_prefix: "GPB"
#   csharp_namespace: "Google.Protobuf.WellKnownTypes"

# Protocol Buffers - Google's data interchange format
# Copyright 2008 Google Inc.  All rights reserved.
# https://developers.google.com/protocol-buffers/
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

require "protobug"

require_relative "any_pb"
require_relative "source_context_pb"

module Google
  module Protobuf
    # A protocol buffer message type.
    class Type
      extend Protobug::Message

      self.full_name = "google.protobuf.Type"

      # The fully qualified message name.
      optional(1, "name", type: :string, proto3_optional: false)
      # The list of fields.
      repeated(
        2,
        "fields",
        type: :message,
        message_class: "Google::Protobuf::Field"
      )
      # The list of types appearing in `oneof` definitions in this type.
      repeated(3, "oneofs", type: :string)
      # The protocol buffer options.
      repeated(
        4,
        "options",
        type: :message,
        message_class: "Google::Protobuf::Option"
      )
      # The source context.
      optional(
        5,
        "source_context",
        type: :message,
        message_class: "Google::Protobuf::SourceContext",
        json_name: "sourceContext",
        proto3_optional: false
      )
      # The source syntax.
      optional(
        6,
        "syntax",
        type: :enum,
        enum_class: "Google::Protobuf::Syntax",
        proto3_optional: false
      )
      # The source edition string, only valid when syntax is SYNTAX_EDITIONS.
      optional(7, "edition", type: :string, proto3_optional: false)
    end

    # A single field of a message type.
    class Field
      extend Protobug::Message

      self.full_name = "google.protobuf.Field"

      # Basic field types.
      module Kind
        extend Protobug::Enum

        self.full_name = "google.protobuf.Field.Kind"

        # Field type unknown.
        TYPE_UNKNOWN = register("TYPE_UNKNOWN", 0)
        # Field type double.
        TYPE_DOUBLE = register("TYPE_DOUBLE", 1)
        # Field type float.
        TYPE_FLOAT = register("TYPE_FLOAT", 2)
        # Field type int64.
        TYPE_INT64 = register("TYPE_INT64", 3)
        # Field type uint64.
        TYPE_UINT64 = register("TYPE_UINT64", 4)
        # Field type int32.
        TYPE_INT32 = register("TYPE_INT32", 5)
        # Field type fixed64.
        TYPE_FIXED64 = register("TYPE_FIXED64", 6)
        # Field type fixed32.
        TYPE_FIXED32 = register("TYPE_FIXED32", 7)
        # Field type bool.
        TYPE_BOOL = register("TYPE_BOOL", 8)
        # Field type string.
        TYPE_STRING = register("TYPE_STRING", 9)
        # Field type group. Proto2 syntax only, and deprecated.
        TYPE_GROUP = register("TYPE_GROUP", 10)
        # Field type message.
        TYPE_MESSAGE = register("TYPE_MESSAGE", 11)
        # Field type bytes.
        TYPE_BYTES = register("TYPE_BYTES", 12)
        # Field type uint32.
        TYPE_UINT32 = register("TYPE_UINT32", 13)
        # Field type enum.
        TYPE_ENUM = register("TYPE_ENUM", 14)
        # Field type sfixed32.
        TYPE_SFIXED32 = register("TYPE_SFIXED32", 15)
        # Field type sfixed64.
        TYPE_SFIXED64 = register("TYPE_SFIXED64", 16)
        # Field type sint32.
        TYPE_SINT32 = register("TYPE_SINT32", 17)
        # Field type sint64.
        TYPE_SINT64 = register("TYPE_SINT64", 18)
      end

      # Whether a field is optional, required, or repeated.
      module Cardinality
        extend Protobug::Enum

        self.full_name = "google.protobuf.Field.Cardinality"

        # For fields with unknown cardinality.
        UNKNOWN = register("CARDINALITY_UNKNOWN", 0)
        # For optional fields.
        OPTIONAL = register("CARDINALITY_OPTIONAL", 1)
        # For required fields. Proto2 syntax only.
        REQUIRED = register("CARDINALITY_REQUIRED", 2)
        # For repeated fields.
        REPEATED = register("CARDINALITY_REPEATED", 3)
      end

      # The field type.
      optional(
        1,
        "kind",
        type: :enum,
        enum_class: "Google::Protobuf::Field::Kind",
        proto3_optional: false
      )
      # The field cardinality.
      optional(
        2,
        "cardinality",
        type: :enum,
        enum_class: "Google::Protobuf::Field::Cardinality",
        proto3_optional: false
      )
      # The field number.
      optional(3, "number", type: :int32, proto3_optional: false)
      # The field name.
      optional(4, "name", type: :string, proto3_optional: false)
      # The field type URL, without the scheme, for message or enumeration
      # types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
      optional(
        6,
        "type_url",
        type: :string,
        json_name: "typeUrl",
        proto3_optional: false
      )
      # The index of the field type in `Type.oneofs`, for message or enumeration
      # types. The first type has index 1; zero means the type is not in the list.
      optional(
        7,
        "oneof_index",
        type: :int32,
        json_name: "oneofIndex",
        proto3_optional: false
      )
      # Whether to use alternative packed wire representation.
      optional(8, "packed", type: :bool, proto3_optional: false)
      # The protocol buffer options.
      repeated(
        9,
        "options",
        type: :message,
        message_class: "Google::Protobuf::Option"
      )
      # The field JSON name.
      optional(
        10,
        "json_name",
        type: :string,
        json_name: "jsonName",
        proto3_optional: false
      )
      # The string value of the default value of this field. Proto2 syntax only.
      optional(
        11,
        "default_value",
        type: :string,
        json_name: "defaultValue",
        proto3_optional: false
      )
    end

    # Enum type definition.
    class Enum
      extend Protobug::Message

      self.full_name = "google.protobuf.Enum"

      # Enum type name.
      optional(1, "name", type: :string, proto3_optional: false)
      # Enum value definitions.
      repeated(
        2,
        "enumvalue",
        type: :message,
        message_class: "Google::Protobuf::EnumValue"
      )
      # Protocol buffer options.
      repeated(
        3,
        "options",
        type: :message,
        message_class: "Google::Protobuf::Option"
      )
      # The source context.
      optional(
        4,
        "source_context",
        type: :message,
        message_class: "Google::Protobuf::SourceContext",
        json_name: "sourceContext",
        proto3_optional: false
      )
      # The source syntax.
      optional(
        5,
        "syntax",
        type: :enum,
        enum_class: "Google::Protobuf::Syntax",
        proto3_optional: false
      )
      # The source edition string, only valid when syntax is SYNTAX_EDITIONS.
      optional(6, "edition", type: :string, proto3_optional: false)
    end

    # Enum value definition.
    class EnumValue
      extend Protobug::Message

      self.full_name = "google.protobuf.EnumValue"

      # Enum value name.
      optional(1, "name", type: :string, proto3_optional: false)
      # Enum value number.
      optional(2, "number", type: :int32, proto3_optional: false)
      # Protocol buffer options.
      repeated(
        3,
        "options",
        type: :message,
        message_class: "Google::Protobuf::Option"
      )
    end

    # A protocol buffer option, which can be attached to a message, field,
    # enumeration, etc.
    class Option
      extend Protobug::Message

      self.full_name = "google.protobuf.Option"

      # The option's name. For protobuf built-in options (options defined in
      # descriptor.proto), this is the short name. For example, `"map_entry"`.
      # For custom options, it should be the fully-qualified name. For example,
      # `"google.api.http"`.
      optional(1, "name", type: :string, proto3_optional: false)
      # The option's value packed in an Any message. If the value is a primitive,
      # the corresponding wrapper type defined in google/protobuf/wrappers.proto
      # should be used. If the value is an enum, it should be stored as an int32
      # value using the google.protobuf.Int32Value type.
      optional(
        2,
        "value",
        type: :message,
        message_class: "Google::Protobuf::Any",
        proto3_optional: false
      )
    end

    # The syntax in which a protocol buffer element is defined.
    module Syntax
      extend Protobug::Enum

      self.full_name = "google.protobuf.Syntax"

      # Syntax `proto2`.
      PROTO2 = register("SYNTAX_PROTO2", 0)
      # Syntax `proto3`.
      PROTO3 = register("SYNTAX_PROTO3", 1)
      # Syntax `editions`.
      EDITIONS = register("SYNTAX_EDITIONS", 2)
    end
  end
end
